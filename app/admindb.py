#!/usr/bin/env python
"""
admindb helper library
   Called by flask app admin
   to modify budgets, etc.

   Copyright 2015 zulily, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from app import app
import app.utils as utils

#globals
SETTINGS_FILE = "/var/dubweb/.admin_settings"

class AdmIDs(object):
    """
    admindb ids helper class
    """
    def __init__(self, prv_id, team_id, project_id, budget_id):
        """
        Initial ids for chart
        """
        self.prv = prv_id
        self.team = team_id
        self.project = project_id
        self.budget = budget_id

def format_budget(bgt_id, bgt, month, comment, team_id, prv_id):
    """
    Helper for budget row formatting
    """
    data_point = {}
    data_point["ID"] = bgt_id
    data_point["Budget"] = bgt
    data_point["Month"] = month
    data_point["Comment"] = comment
    data_point["TeamID"] = team_id
    data_point["ProviderID"] = prv_id
    return data_point

def get_budget_items(ids, m_filter, bgt_filter):
    """
    Given a time, and optional filters for provider, team, month,
    budget...
    Return list of budget entries.
    """
    datalist = []

    settings = utils.load_json_definition_file(SETTINGS_FILE)
    success, dubconn = utils.open_monitoring_db(settings['dbhost'],
                                                settings['dbuser'],
                                                settings['dbpass'],
                                                settings['db_db'])

    if success:
        params = []
        query = """
                    SELECT distinct budgetid, budget, month,
                    IFNULL(comment,""), teamid, prvid
                    FROM budgetdata WHERE 1 """
        if ids.team is not None:
            query += " AND teamid = %s "
            params.append(str(ids.team))
        if ids.budget is not None:
            query += " AND budgetid = %s "
            params.append(str(ids.budget))
        if ids.prv is not None:
            query += " AND prvid = %s "
            params.append(str(ids.prv))
        if m_filter is not None:
            query += " AND month LIKE %s "
            params.append(m_filter + "%")
        if bgt_filter is not None:
            query += " AND budget LIKE %s "
            params.append(str(bgt_filter) + "%")

        app.logger.debug("get budget query: %s", query)

        dubmetrics = utils.get_from_db(query, tuple(params), dubconn)

        for dubmetric in dubmetrics:
            if len(dubmetric) > 0 and dubmetric[1] is not None:
                budget_row = format_budget(bgt_id=dubmetric[0],
                                           bgt=dubmetric[1],
                                           month=dubmetric[2],
                                           comment=dubmetric[3],
                                           team_id=dubmetric[4],
                                           prv_id=dubmetric[5])
                datalist.append(budget_row)


        dubconn.close()
    return datalist

def edit_budget_item(ids, my_month, my_budget, my_comment):
    """
    Given budget id, and modified: providers, team, project,
    budget, or month
    Return modified budget entry.
    """
    settings = utils.load_json_definition_file(SETTINGS_FILE)
    success, dubconn = utils.open_monitoring_db(settings['dbhost'],
                                                settings['dbuser'],
                                                settings['dbpass'],
                                                settings['db_db'])

    if success:
        budget = format_budget(bgt_id=int(ids.budget),
                               bgt=int(my_budget),
                               month=my_month,
                               comment=my_comment,
                               team_id=int(ids.team),
                               prv_id=int(ids.prv))

        query = """
                    UPDATE budgetdata
                    SET budget=%s, month=%s, teamid=%s, prvid=%s, comment=%s
                    WHERE budgetid=%s
                """
        cursor = dubconn.cursor()
        try:
            cursor.execute(query, (budget['Budget'], budget['Month'],
                                   budget['TeamID'], budget['ProviderID'],
                                   budget['Comment'], budget['ID']))
        except Exception, err:
            app.logger.error("mysql exception: %s", err.message)
            app.logger.error("generated by: %s", query)
            success = 0
        dubconn.commit()
        cursor.close()
        dubconn.close()
    return budget

def insert_budget_item(ids, my_month, my_budget, my_comment):
    """
    Given providers, team, project, budget, and month
    Return inserted budget entry.
    """
    settings = utils.load_json_definition_file(SETTINGS_FILE)
    success, dubconn = utils.open_monitoring_db(settings['dbhost'],
                                                settings['dbuser'],
                                                settings['dbpass'],
                                                settings['db_db'])

    if success:
        budget = format_budget(bgt_id=None,
                               bgt=int(my_budget),
                               month=my_month,
                               comment=my_comment,
                               team_id=int(ids.team),
                               prv_id=int(ids.prv))

        query = """
                    INSERT INTO budgetdata
                    (budget, month, teamid, prvid, comment)
                    VALUES (%s, %s, %s, %s, %s)
                """
        cursor = dubconn.cursor()
        try:
            cursor.execute(query, (budget['Budget'], budget['Month'],
                                   budget['TeamID'], budget['ProviderID'],
                                   budget['Comment']))
        except Exception, err:
            app.logger.error("mysql exception: %s", err.message)
            app.logger.error("generated by: %s", query)
            success = 0
        dubconn.commit()
        cursor.close()
        dubconn.close()
    return get_budget_items(ids, my_month, my_budget)[0]

def delete_budget_item(ids, my_month, my_budget, my_comment):
    """
    Given budget id, delete from db
    Return deleted budget entry.
    """
    settings = utils.load_json_definition_file(SETTINGS_FILE)
    success, dubconn = utils.open_monitoring_db(settings['dbhost'],
                                                settings['dbuser'],
                                                settings['dbpass'],
                                                settings['db_db'])

    if success:
        budget = format_budget(bgt_id=int(ids.budget),
                               bgt=int(my_budget),
                               month=my_month,
                               comment=my_comment,
                               team_id=int(ids.team),
                               prv_id=int(ids.prv))

        query = """
                    DELETE FROM budgetdata
                    WHERE budgetid=%s
                """
        app.logger.debug("Got a delete query of: %s ", query)
        cursor = dubconn.cursor()
        try:
            cursor.execute(query, (budget['ID'],))
        except Exception, err:
            app.logger.error("mysql exception: %s", err.message)
            app.logger.error("generated by: %s", query)
            success = 0
        dubconn.commit()
        cursor.close()
        dubconn.close()
    return budget

